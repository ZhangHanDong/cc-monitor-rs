name: CC Monitor Build CI

on:
  push:
    branches:
      - main
    paths:
        - packaging/**
        - resources/**
        - src/**
        - .github/**
        - .cargo/**
        - Cargo.lock
        - Cargo.toml
        # ignore files
        - '!**/*.md'
        - '!LICENSE-MIT'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
    paths:
        - packaging/**
        - resources/**
        - src/**
        - .github/**
        - .cargo/**
        - Cargo.lock
        - Cargo.toml
        # ignore files
        - '!**/*.md'
        - '!LICENSE-MIT'
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-D warnings"

jobs:
  build_ubuntu:
    name: Build Ubuntu
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev \
            libsqlite3-dev \
            pkg-config \
            llvm \
            clang \
            libclang-dev \
            binfmt-support \
            libxcursor-dev \
            libx11-dev \
            libasound2-dev \
            libpulse-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ubuntu-build-${{ hashFiles('Cargo.lock') }}

      - name: Build
        run: |
          cargo build

  build_macos:
    name: Build macOS (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        include:
          # Apple Silicon Macs (M1/M2/M3/M4 chips)
          - os: macos-14
            arch: arm64
          # Intel Macs (x86_64 architecture)
          - os: macos-13
            arch: x86_64
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: macos-${{ matrix.arch }}-build-${{ hashFiles('Cargo.lock') }}

      - name: Build
        run: |
          cargo build

  build_windows:
    name: Build Windows
    runs-on: windows-2022
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: windows-build-${{ hashFiles('Cargo.lock') }}

      - name: Build
        run: |
          cargo build

  # Build Summary
  build_summary:
    name: Robrix Build Results Summary
    runs-on: ubuntu-latest
    needs: [
      build_ubuntu,
      build_macos,
      build_windows,
    ]
    if: always()

    steps:
      - run: |
          echo "Ubuntu: ${{ needs.build_ubuntu.result }}"
          echo "macOS: ${{ needs.build_macos.result }}"
          echo "Windows: ${{ needs.build_windows.result }}"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true